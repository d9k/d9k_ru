# Articles

[] database is for reading last version. revisions are stored in files (may even be compressed)
  []

`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`
`ALTER TABLE tableA ALTER COLUMN colA SET DATA TYPE UUID USING (uuid_generate_v4());`

I have psql 9.5

additional article fields:

+ author
+ content
+ content_type: markdown+html, html
+ modified_by:
+ modified_at:
+ created_at:
+ created_by

[] Насколько оптимален тип TEXT?
[] Перечисляемый тип?


```
CREATE TABLE article (
    id integer NOT NULL,
    name text,
    -- TODO! global_id UUID default uuid_generate_v4(),
    system_name text NOT NULL,
    -- path text,
    content text,
    content_type: markdown+html, html,
    active boolean DEFAULT true NOT NULL,
)

CREATE TABLE object_changed(
  id INT SERIAL,
  author_login text NOT NULL,
  table_name text NOT NULL,
  global_id
  datetime timestamp without time zone NOT NULL,
  -- TODO action_type: modify/create/delete
)
```

from pyragrid:


```
CREATE TABLE article (
    id integer NOT NULL,
    name text,
    "systemName" text NOT NULL,
    path text,
    "activeRevisionId" integer,
    "isTemplate" boolean DEFAULT false NOT NULL,
    active boolean DEFAULT true NOT NULL
);


CREATE TABLE article_revision (
    id integer NOT NULL,
    "articleId" integer NOT NULL,
    "parentRevisionId" integer,
    code text NOT NULL,
    "dateTime" timestamp without time zone NOT NULL,
    "authorId" integer NOT NULL
);
```


```
class Article(Base):
    __tablename__ = 'article'

    id = Column(
        Integer, primary_key=True,
        info={'colanderalchemy': {
            'title': 'id статьи',
            'widget': deform.widget.TextInputWidget(readonly=True)
        }})

    global_id = Column(
        postgresql.UUID,
        index=True,
        nullable=False,
        server_default=text('gen_random_uuid()')
    )

    name = Column(
        Text,
        info={'colanderalchemy': {
            'title': 'Название статьи',
            'missing': None,
        }})

    system_name = Column(
        Text,
        nullable=False,
        unique=True,
        info={'colanderalchemy': {
            'title': 'Системное имя',
            'description': '(index для главной страницы)',
            'validator': colander.Regex(
                    '^[a-z0-9_\-/]+$',
                    'Логин должен содержать только цифры и английские буквы'
            ),
            'missing': colander.required
        }})

//    path = Column(
//        Text,
//        unique=True,
//        info={'colanderalchemy': {
//          'title': 'Путь к статье',
//          # TODO description to validator
//          'description': '(должен начинаться с /)',
//          'validator': colander.Regex(
//                  '^[a-z0-9_\-/]+$',
//                  'Путь должен содержать только цифры и английские буквы'
//          ),
//          # 'missing': colander.required
//        }})

//    active_revision_id = Column(
//        Integer,
//        nullable=True,
//        info={'colanderalchemy': {
//          'title': 'id активной ревизии',
//          'widget': deform.widget.TextInputWidget(readonly=True),
//          'typ': NullableInt
//        }})

    active = Column(
        Boolean, default=True, server_default='true',
        nullable=False,
        info={'colanderalchemy': {
            'title': 'Статья опубликована',
        }})

// по-умолчанию всегда шаблон!
//
//    is_template = Column(
//        Boolean, default=False, server_default='false',
//        nullable=False,
//        info={'colanderalchemy': {
//            'title': 'Является шаблоном',
//        }})
```
