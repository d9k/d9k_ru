# mithril required
# store.js is required!

# https://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
toCamelCase = (s) ->
  s.replace(/(\-[a-z])/g, ($1) -> return $1.toUpperCase().replace('-','') )


elById = document.getElementById.bind(document)

M = {
  timerAutoUpdateComponentsData: undefined
  #instances: {}
  types: {}

  MAX_AUTOGENERATED_COMPONENT_ID: 2048
  INTERVAL_AUTO_UPDATE_COMPONENTS_DATA_MSEC: 2000

  mountById: (elementId) ->
    element = elById(elementId)
    #instanceData = M.instances[elementId]
    instanceData = storeGet('ui.' + element.id)
    #instanceData = {}
    componentType = M.types[instanceData.type]
    instanceData.domElementId = elementId

    #componentType.initAttrs(instanceData)

    storeSet('ui.' + element.id, instanceData)

    m.mount element, view: ->
      m componentType, instanceData

  generateId: (componentTypeName) ->
    for i in [1 .. M.MAX_AUTOGENERATED_COMPONENT_ID]
      elementId = componentTypeName + i
      #if not M.instances[elementId]?
      if not storeGet('ui.' + elementId)?
        return elementId

    return undefined

  updateComponentsDataForDebug: () ->
    componentsData = storeGet('ui')
    for elementId, componentData of componentsData
      element = elById(elementId)
      element.setAttribute 'data', JSON.stringify(componentData)

  autoUpdateComponentsData: () ->
    M.updateComponentsDataForDebug()

    if M.timerAutoUpdateComponentsData?
      clearInterval(M.timerAutoUpdateComponentsData)

    M.timerAutoUpdateComponentsData = window.setInterval M.updateComponentsDataForDebug, M.INTERVAL_AUTO_UPDATE_COMPONENTS_DATA_MSEC

  mountToDom: () ->
    for typeName, componentType of M.types
      tagName = 'component-' + typeName
      console.log 'tag: ' + tagName

      ## https://stackoverflow.com/a/15342661/1760643
      #elements = document.querySelectorAll('[data-component]');
      elements = document.querySelectorAll(tagName);

      for element in elements
        if not element.id?.length
          # autogenerate id
          # TODO to separate function
          #for i in [1 .. M.MAX_AUTOGENERATED_COMPONENT_ID]
            #elementId = typeName + i
            ##if not M.instances[elementId]?
            #if not storeGet('ui.' + elementId)?
              #element.id = elementId
              #break
          element.id = M.generateId(typeName)

        if not element.id?.length
          console.log 'Unable to find new elementId for ' + tagName
          continue

        json_data = element.getAttribute('data')

        try
          instanceData = JSON.parse(json_data)
        catch e
          console.log 'Can\'t parse json - ' + json_data + ' - for ' + tagName
          continue

        instanceData ?= {}

        for i in [element.attributes.length - 1 .. 0]
          attr = element.attributes[i]
          if attr.name.match("^data-")
            dataKey = toCamelCase(attr.name.substr(5))
            #console.log dataKey
            #console.log attr.name + ': ' + attr.value
            element.removeAttribute(attr.name)
            try
              instanceData[dataKey] = JSON.parse(attr.value)
            catch e
              #console.log 'Can\'t parse json - ' + attr.value + ' - for attr ' + attr.name + ' in  #' + element.id
              #continue
              instanceData[dataKey] = attr.value


        #element.setAttribute 'data', JSON.stringify(instanceData)

        instanceData.type = typeName

        #M.instances[element.id] = instanceData
        storeSet('ui.' + element.id, instanceData)

        M.mountById(element.id)
        console.log 'id: ' + element.id
      # end iterate elements
    # end iterate component types
    M.autoUpdateComponentsData()
  # end mountToDom()
}

window.uiComponents = M
